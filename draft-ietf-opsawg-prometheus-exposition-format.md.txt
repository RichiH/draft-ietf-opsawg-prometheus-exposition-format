



Ops Working Group                                               T. Proud
Internet-Draft                                                Prometheus
Intended status: Informational                             June 27, 2016
Expires: December 29, 2016


         A Standard for the exposing metrics data from software
                              draft-rfc-01

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 29, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.











Proud                   Expires December 29, 2016               [Page 1]

Internet-Draft      Labeled metrics exposition format          June 2016


Table of Contents

   1.  Overview and Rational . . . . . . . . . . . . . . . . . . . .   2
   2.  Metrics Format  . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Discussion  . . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   3
   Appendix A.  History  . . . . . . . . . . . . . . . . . . . . . .   3
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   5

1.  Overview and Rational

2.  Metrics Format

   The protocol is line-oriented.  A line-feed character ("\n")
   separates lines.  The last line must end with a line-feed character.

   Empty lines are ignored.

   Within a line, tokens can be separated by any number of blanks and/or
   tabs (and have to be separated by at least one if they would
   otherwise merge with the previous token).

   Leading and trailing whitespace is ignored.

   Lines with a "#" as the first non-whitespace character are comments.
   They are ignored unless the first token after "#" is either "HELP" or
   "TYPE".  Those lines are treated as follows:

   o  If the token is "HELP", at least one more token is expected, which
      is the metric name.  All remaining tokens are considered the
      docstring for that metric name.  "HELP" lines may contain any
      sequence of UTF-8 characters (after the metric name), but the
      backslash and the line-feed characters have to be escaped as "\"
      and "\n", respectively.  Only one "HELP" line may exist for the
      same metric name.

   o  If the token is "TYPE", exactly two more tokens are expected.  The
      first is the metric name, and the second is either "counter",
      "gauge", "summary", or "untyped", defining the type for the metric
      of that name.  Only one "TYPE" line may exist for the same metric
      name.  The "TYPE" line for a metric name has to appear before the
      first sample is reported for that metric name.  If there is no
      "TYPE" line for a metric name, the type is set to "untyped".
      Remaining lines describe samples, one per line, with the following
      syntax (EBNF):






Proud                   Expires December 29, 2016               [Page 2]

Internet-Draft      Labeled metrics exposition format          June 2016


metric_name [ "{" label_name "=" `"` label_value `"` { "," label_name "=" `"` label_value `"` } [ "," ] "}" ] value [ timestamp ]

                             Text format EBNF

   metric_name and label_name have the usual Prometheus expression
   language restrictions. label_value can be any sequence of UTF-8
   characters, but the backslash, the double-quote, and the line-feed
   characters have to be escaped as "\", "\"", and "\n", respectively.
   value is a float, and timestamp an int64 (milliseconds since epoch,
   i.e. 1970-01-01 00:00:00 UTC, excluding leap seconds), represented as
   required by the Go strconv package (cf. functions ParseInt and
   ParseFloat).  In particular, Nan, +Inf, and -Inf are valid values.
   The type summary is difficult to represent in the text format.  The
   following conventions apply: Each quantile x is given as a separate
   sample, each with a label .  The sample sum for a summary named x is
   given as a separate sample named x_sum.  The sample count for a
   summary named x is given as a separate sample named x_count.

3.  Discussion

4.  Security Considerations

Appendix A.  History

   The original Prometheus prototype exposition format used JSON text as
   the default.  JSON is slow and cannot have it data model structure
   defined in one single place like a IDL.  Numerous encoders/decoders
   use runtime reflection to attempt to map field values back to fields
   on dumb data objects (DDO).  This meant routine schema changes would
   break legacy Prometheus servers or clients.  Further all Prometheus
   metrics are floats, and JSON lacked standardization around NAN and
   INF.

   Protocol Buffers were a natural choice since they were mature,
   production ready, and defined the data model in a single source IDL
   file (.proto) that the protoc compiler emits into user code.  If one
   designs the Protocol Buffer schema correctly, it is nearly 100
   percent compatible with future changes on both server/client end.  It
   is also fast.  The internal encoding scheme that Prometheus uses is a
   variation of RecordIO (you'll find that if you lookup Sawzall), which
   is a minimized version of an internal encoding scheme used at Google.
   It makes Protocol Buffer message streams appendable and support near
   random traversal.  It also means decoding can be done incrementally ,
   which saves resources.  This is not a possibility in most JSON
   implementations.  Basically this is the textbook reason why folks use
   Protocol Buffers.  Why not Avro or Message Pack?  They were immature
   and lacked the single site IDL file.  Why not Thrift?  It is an
   inferior reverse engineering of Protocol Buffers, and many of its



Proud                   Expires December 29, 2016               [Page 3]

Internet-Draft      Labeled metrics exposition format          June 2016


   language-specific generated code emitters exhibited bugs and
   inconsistencies (e.g., in 2012, the encoding for the first enum value
   in Thrift in its binary wire format was "0" or "1" depending on which
   language you used even from the same Thrift release).  Sorry, that is
   Mickey Mouse stuff.

   The text format emerged strictly to support two cases: no Protocol
   Buffer support in an environment (e.g., shell script) and support
   one-off human debugging.

   The binary format was also designed to not be stateful, meaning each
   individual decoded message from the stream could be treated in
   isolation.  The text format lacks this: state spans multiple lines.
   This increases complexity.

   Because gRPC did not exist at the time and Thrift had defects, HTTP
   was the common denominator for transport that supports both binary
   and text formats.  The final protocol version uses HTTP MIME type
   autonegotiation to resolve whether binary or text is used.  Previous
   versions used HTTP request headers, but that is a poor practice.  I
   had considered using different named endpoints (/metrics.pb or
   /metrics.txt) for different formats (a la REST), but that would have
   increased complexity with middleware registration in each client
   library.  HTTP MIME auto-negotiation is standardized too and
   predictable.

   The metrics in the binary format are done as concrete types (as
   opposed to loose key-value pairs as some had proposed).  That takes
   guess work out of clients' interpretation of them.  Protocol Buffers
   did not have union "oneof" or "any" support at that time (became
   public last year).  This necessitated the creation of the separate
   per-metric enum field to instruct which concrete metric type was
   populated: counter, gauge, histogram, summary, untyped.  This meant
   the server could perform loose invariant enforcement and reject bad
   messages (e.g., a metric that populated both gauge and histogram
   fields).  Were I to do this format over again, I would deprecated the
   individual gauge, counter, histogram nested fields in the metric
   entry and replace it with a "oneof".  I am unsure this would be wise:
   I do not think Protocol Buffer 3 ("any", "oneof", and map) support is
   sufficiently universal in the public ecosystem to warrant a
   conversion.  This might be worth fixing in two years.  Google is
   working on and publishing more official Protocol Buffer language
   integrations.

   Why pull not push for transport?  Push requires a HA receiver for the
   metrics and possibly for the metrics producers/clients to maintain
   more state on the receiver, what has been sent, how old, publication
   interval, extra configuration, etc.  Pull was simply easier.  It also



Proud                   Expires December 29, 2016               [Page 4]

Internet-Draft      Labeled metrics exposition format          June 2016


   meant all that a client required was to have support for HTTP, which
   is ubiquitous.  Supporting push directly is more practical these
   days, but ...

   In terms of metric design (not wire format), these metric types match
   most software, industrial, and sciences use cases.  Other metric
   types could be added later if the needs warrant it.

Author's Address

   Matt
   Prometheus
   X
   X  X

   Phone: X
   Email: matt.proud@gmail.com


































Proud                   Expires December 29, 2016               [Page 5]
